namespace Xilium.CefGlue
{
    using System;
    using Xilium.CefGlue.Interop;

    public unsafe sealed class CefKeyEvent
    {
        private cef_key_event_t* _self;

        internal CefKeyEvent(cef_key_event_t* ptr)
        {
            _self = ptr;
        }

        internal void Dispose()
        {
            _self = null;
        }

        /// <summary>
        /// The type of keyboard event.
        /// </summary>
        public CefKeyEventType EventType
        {
            get { return _self->type; }
        }

        /// <summary>
        /// Bit flags describing any pressed modifier keys. See
        /// cef_key_event_modifiers_t for values.
        /// </summary>
        public CefKeyEventModifiers Modifiers
        {
            get { return _self->modifiers; }
        }

        /// <summary>
        /// The Windows key code for the key event. This value is used by the DOM
        /// specification. Sometimes it comes directly from the event (i.e. on
        /// Windows) and sometimes it's determined using a mapping function. See
        /// WebCore/platform/chromium/KeyboardCodes.h for the list of values.
        /// </summary>
        public int WindowsKeyCode
        {
            get { return _self->windows_key_code; }
        }

        /// <summary>
        /// The actual key code genenerated by the platform.
        /// </summary>
        public int NativeKeyCode
        {
            get { return _self->native_key_code; }
        }

        /// <summary>
        /// Indicates whether the event is considered a "system key" event (see
        /// http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
        /// This value will always be false on non-Windows platforms.
        /// </summary>
        public bool IsSystemKey
        {
            get { return _self->is_system_key; }
        }

        /// <summary>
        /// The character generated by the keystroke.
        /// </summary>
        public char Character
        {
            get { return (char)_self->character; }
        }

        /// <summary>
        /// Same as |character| but unmodified by any concurrently-held modifiers
        /// (except shift). This is useful for working out shortcut keys.
        /// </summary>
        public char UnmodifiedCharacter
        {
            get { return (char)_self->unmodified_character; }
        }

        /// <summary>
        /// True if the focus is currently on an editable field on the page. This is
        /// useful for determining if standard key events should be intercepted.
        /// </summary>
        public bool FocusOnEditableField
        {
            get { return _self->focus_on_editable_field; }
        }
    }
}
